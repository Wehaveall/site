const admin = require('firebase-admin');

// Fun√ß√£o para inicializar o Firebase Admin SDK de forma segura
function initializeFirebaseAdmin() {
  // A Vercel armazena as vari√°veis de ambiente, ent√£o podemos acess√°-las diretamente
  if (!admin.apps.length) {
    try {
      const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_JSON);
      admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
        databaseURL: "https://shortcut-6256b-default-rtdb.firebaseio.com"
      });
      console.log('Firebase Admin SDK inicializado com sucesso.');
    } catch (error) {
      console.error('Falha na inicializa√ß√£o do Firebase Admin SDK:', error);
    }
  }
  return admin;
}

export default async function handler(req, res) {
  // Garante que s√≥ aceitamos requisi√ß√µes POST
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©todo n√£o permitido' });
  }

  // Inicializa o admin
  const adminInstance = initializeFirebaseAdmin();
  const db = adminInstance.firestore();

  const { email, password, name, phone, company } = req.body;

  // Valida√ß√£o b√°sica dos dados recebidos
  if (!email || !password || !name) {
    return res.status(400).json({ error: 'Dados insuficientes: E-mail, senha e nome s√£o obrigat√≥rios.' });
  }

  try {
    console.log(`[API] Recebida solicita√ß√£o para criar usu√°rio: ${email}`);
    console.log(`[API] Dados recebidos:`, { email, name, phone: phone || 'n√£o informado', company: company || 'n√£o informado' });
    
    // 1. Cria o usu√°rio no Firebase Authentication com email n√£o verificado
    console.log(`[API] Tentando criar usu√°rio no Firebase Auth...`);
    const userRecord = await adminInstance.auth().createUser({
      email: email,
      password: password,
      displayName: name,
      emailVerified: false, // For√ßa verifica√ß√£o de email
    });

    console.log(`[API] ‚úÖ Usu√°rio criado no Auth com UID: ${userRecord.uid}`);

    // 2. Prepara os dados para salvar no Firestore - ESTRUTURA CORRIGIDA
    const customerData = {
      // Dados principais
      Nome: name, // Campo Nome (com N mai√∫sculo) para compatibilidade
      email: email,
      phone: phone || null,
      country: company || "Brasil", // Usando company como country por compatibilidade
      
      // Dados do usu√°rio Firebase
      user: {
        uid: userRecord.uid,
        email: email,
        displayName: name
      },
      
      // Status da conta
      terms_accepted: true,
      terms_accepted_at: new Date().toISOString(),
      created_at: admin.firestore.FieldValue.serverTimestamp(),
      email_verified: false,
      account_status: 'pending_verification',
      
      // Dados de licen√ßa
      license_active: false,
      license_type: null,
      payment_status: 'pending',
      pay_method: null,
      sub_start: null,
      sub_end: null,
      last_payment_date: null,
      active_machines: 0,
      
      // ID para refer√™ncia
      id: userRecord.uid
    };

    // 3. Salva os dados no Firestore usando o UID como ID do documento
    console.log(`[API] Tentando salvar dados no Firestore...`);
    console.log(`[API] Dados a serem salvos:`, customerData);
    await db.collection('users').doc(userRecord.uid).set(customerData);
    console.log(`[API] ‚úÖ Dados do usu√°rio salvos no Firestore.`);

    // 4. Chamar Cloud Function para enviar email de verifica√ß√£o
    try {
      const cloudFunctionUrl = 'https://us-central1-shortcut-6256b.cloudfunctions.net/sendVerificationEmailOnSignup';
      
      const response = await fetch(cloudFunctionUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          uid: userRecord.uid,
          email: email
        })
      });

      const result = await response.json();
      
      if (response.ok) {
        console.log('‚úÖ Email de verifica√ß√£o enviado via Cloud Function');
        
        // Se estiver em desenvolvimento, mostrar o link
        if (result.verificationLink) {
          console.log('üîó Link de verifica√ß√£o (DEV):', result.verificationLink);
        }
      } else {
        console.error('‚ùå Erro ao enviar email via Cloud Function:', result);
      }
      
    } catch (emailError) {
      console.error('‚ùå Erro ao chamar Cloud Function:', emailError);
      // N√£o falha o cadastro se o email n√£o for enviado
    }

    // 5. Responde ao cliente com sucesso - frontend enviar√° o email
    console.log(`[API] ‚úÖ Processo conclu√≠do com sucesso para UID: ${userRecord.uid}`);
    return res.status(201).json({ 
      success: true, 
      uid: userRecord.uid,
      email: email,
      name: name,
      message: 'Conta criada com sucesso! Enviando email de verifica√ß√£o...',
      requiresEmailVerification: true,
      // Indica que o frontend deve enviar o email
      sendEmailOnFrontend: true
    });

  } catch (error) {
    console.error('[API] ‚ùå Erro ao criar usu√°rio:', error);
    console.error('[API] ‚ùå C√≥digo do erro:', error.code);
    console.error('[API] ‚ùå Mensagem do erro:', error.message);
    
    // Traduz os erros do Firebase para mensagens amig√°veis
    let friendlyMessage = 'Ocorreu um erro inesperado ao criar sua conta.';
    if (error.code === 'auth/email-already-exists') {
      friendlyMessage = 'Este e-mail j√° est√° cadastrado. Tente fazer login ou redefinir sua senha.';
    } else if (error.code === 'auth/invalid-password') {
      friendlyMessage = 'Senha inv√°lida. A senha precisa ter no m√≠nimo 6 caracteres.';
    } else if (error.code === 'auth/invalid-email') {
      friendlyMessage = 'Email inv√°lido. Verifique o formato do email.';
    } else if (error.code === 'auth/weak-password') {
      friendlyMessage = 'Senha muito fraca. Use uma senha mais forte.';
    }
    
    return res.status(500).json({ error: friendlyMessage });
  }
} 