rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =====================================
    // 🔒 COLEÇÕES SEGURAS POR PADRÃO
    // =====================================
    
    // Bloqueia acesso a coleções sensíveis que só devem ser acessadas pelo backend
    match /mail/{docId} {
      allow read, write: if false;
    }
    
    match /approved_payments/{docId} {
        allow read, write: if false;
    }

    match /chargebacks/{docId} {
        allow read, write: if false;
    }

    // =====================================
    // 🔒 REGRAS PARA A COLEÇÃO DE USUÁRIOS
    // =====================================
    
    match /users/{userId} {
    
      // LEITURA: Permitida apenas pelo próprio usuário.
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // LEITURA (para queries): Permitida apenas quando o usuário está autenticado
      // e está buscando seus próprios dados
      allow read: if request.auth != null && 
                     (resource.data.user.uid == request.auth.uid || 
                      resource.data.email == request.auth.token.email ||
                      userId == request.auth.uid);
      
      // CRIAÇÃO: Desabilitada para o cliente.
      allow create: if false;
      
      // ATUALIZAÇÃO: Permitida pelo usuário, mas com regras muito estritas.
      allow update: if request.auth != null 
                     && request.auth.uid == userId
                     // 1. Valida APENAS os campos que o usuário PODE mudar.
                     && validateProfileUpdate(request.resource.data)
                     // 2. Garante que campos críticos NÃO foram alterados.
                     && areImmutableFieldsUnchanged(['email', 'id', 'license_active', 'sub_end', 'created_at', 'payment_status']);
                     
      // EXCLUSÃO: Desabilitada para o cliente.
      allow delete: if false;
    }
    
    // Qualquer outra coleção não especificada é bloqueada por padrão
    match /{document=**} {
      allow read, write: if false;
    }
    
    // =====================================
    // 🔧 FUNÇÕES DE VALIDAÇÃO CORRIGIDAS
    // =====================================
    
    // Função específica e segura para validar a ATUALIZAÇÃO do perfil pelo usuário.
    function validateProfileUpdate(data) {
      return (data.Nome is string && data.Nome.size() > 0 && data.Nome.size() <= 100)
          && (data.phone == null || (data.phone is string && data.phone.size() <= 20))
          && (data.company == null || (data.company is string && data.company.size() <= 100))
          && (data.country == null || (data.country is string && data.country.size() <= 50));
    }
    
    // Função poderosa que garante que campos imutáveis não foram alterados,
    // usando as funções nativas e corretas do Firestore.
    function areImmutableFieldsUnchanged(immutableFields) {
      // 'diff' compara os dados existentes (resource.data) com os novos (request.resource.data)
      // e retorna um conjunto de chaves que foram adicionadas, modificadas ou removidas.
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      
      // A regra falha se qualquer uma das chaves afetadas estiver na lista de campos imutáveis.
      // 'hasAny' retorna true se houver uma interseção, então usamos '!' para negar e permitir a escrita
      // apenas se NÃO houver interseção.
      return !affectedKeys.hasAny(immutableFields);
    }
  }
} 