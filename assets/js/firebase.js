// Vari√°vel para armazenar a promessa de inicializa√ß√£o do Firebase
let firebaseInitializationPromise = null;

// Fun√ß√£o para buscar a configura√ß√£o e inicializar o Firebase
async function initializeFirebase() {
    try {
        console.log("üî• Buscando configura√ß√£o do Firebase...");
        
        // Buscar configura√ß√£o via API (√∫nica fonte agora)
        const response = await fetch('/api/firebase-config');
        if (!response.ok) {
            throw new Error(`API Firebase falhou com status ${response.status}`);
        }
        
        const firebaseConfig = await response.json();
        console.log("‚úÖ Configura√ß√£o obtida da API");

        if (!firebaseConfig?.apiKey) {
            throw new Error("Configura√ß√£o do Firebase recebida √© inv√°lida.");
        }

        if (!firebase.apps.length) {
            console.log("üöÄ Inicializando Firebase...");
            firebase.initializeApp(firebaseConfig);
        } else {
            console.log("‚úÖ Firebase j√° inicializado.");
        }
        
        // Retorna as inst√¢ncias dos servi√ßos para uso
        const auth = firebase.auth();
        const db = firebase.firestore();
        
        // Firebase Functions √© opcional - s√≥ carrega se dispon√≠vel
        let functions = null;
        try {
            if (firebase.functions) {
                functions = firebase.app().functions('us-east1');
                console.log("‚úÖ Firebase Functions carregado");
            } else {
                console.log("‚ö†Ô∏è Firebase Functions n√£o dispon√≠vel nesta p√°gina");
            }
        } catch (error) {
            console.warn("‚ö†Ô∏è Firebase Functions n√£o carregou:", error.message);
        }

        // Configura√ß√µes do Firebase ap√≥s inicializa√ß√£o
        console.log("üîß Aplicando configura√ß√µes do Firebase...");
        
        // Configurar persist√™ncia de autentica√ß√£o para SESSION
        try {
            await auth.setPersistence(firebase.auth.Auth.Persistence.SESSION);
            console.log("‚úÖ Persist√™ncia configurada para SESSION");
        } catch (error) {
            console.error("‚ùå Erro ao configurar persist√™ncia:", error);
        }

        // Configura√ß√µes do Firestore (sem persist√™ncia para eliminar aviso de depreca√ß√£o)
        db.settings({
            cacheSizeBytes: firebase.firestore.CACHE_SIZE_UNLIMITED,
            merge: true
        });
        console.log("‚úÖ Firestore configurado (cache apenas em mem√≥ria para evitar avisos de depreca√ß√£o)");

        // Configurar idioma padr√£o
        auth.useDeviceLanguage();

        // Expor globalmente para uso em outros scripts
        window.auth = auth;
        window.db = db;
        window.functions = functions;

        // Expor fun√ß√µes utilit√°rias
        window.detectUserLanguage = detectUserLanguage;
        window.setFirebaseLanguage = setFirebaseLanguage;
        window.registerWithAutoLanguage = registerWithAutoLanguage;
        window.resendVerificationWithLanguage = resendVerificationWithLanguage;
        window.syncEmailVerificationStatus = syncEmailVerificationStatus;
        window.ensureAuthentication = ensureAuthentication;

        console.log("üöÄ Firebase configurado completamente");

        return {
            auth: auth,
            db: db,
            functions: functions
        };

    } catch (error) {
        console.error("‚ùå Erro cr√≠tico ao inicializar o Firebase:", error);
        return Promise.reject(error instanceof Error ? error : new Error(error));
    }
}

// Fun√ß√£o para garantir que o Firebase seja inicializado apenas uma vez
function getFirebaseServices() {
    if (!firebaseInitializationPromise) {
        firebaseInitializationPromise = initializeFirebase();
    }
    return firebaseInitializationPromise;
}

// Fun√ß√£o para detectar idioma automaticamente
async function detectUserLanguage(email) {
    try {
        const browserLanguage = navigator.language || navigator.userLanguage;
        const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        
        let country = null;
        const timezoneCountryMap = {
            'America/Sao_Paulo': 'BR',
            'America/Argentina/Buenos_Aires': 'AR',
            'Europe/Madrid': 'ES',
            'Europe/Paris': 'FR',
            'Europe/Berlin': 'DE',
            'Europe/Rome': 'IT',
            'Europe/London': 'GB',
            'America/New_York': 'US',
            'America/Los_Angeles': 'US'
        };
        
        if (timezoneCountryMap[timezone]) {
            country = timezoneCountryMap[timezone];
        }

        const emailDomain = email.split('@')[1];
        const domainLanguages = {
            'gmail.com.br': 'pt-br',
            'yahoo.com.br': 'pt-br',
            'hotmail.com.br': 'pt-br',
            'outlook.com.br': 'pt-br',
            'uol.com.br': 'pt-br',
            'terra.com.br': 'pt-br',
            'gmail.es': 'es',
            'yahoo.es': 'es',
            'hotmail.es': 'es',
            'gmail.fr': 'fr',
            'yahoo.fr': 'fr',
            'hotmail.fr': 'fr',
            'gmail.de': 'de',
            'yahoo.de': 'de',
            'hotmail.de': 'de',
            'gmail.it': 'it',
            'yahoo.it': 'it',
            'hotmail.it': 'it'
        };

        const countryLanguages = {
            'BR': 'pt-br',
            'ES': 'es',
            'FR': 'fr',
            'DE': 'de',
            'IT': 'it',
            'US': 'en',
            'GB': 'en',
            'AU': 'en',
            'CA': 'en'
        };

        const browserLangMap = {
            'pt': 'pt-br',
            'pt-BR': 'pt-br',
            'pt-PT': 'pt-br',
            'es': 'es',
            'es-ES': 'es',
            'es-MX': 'es',
            'fr': 'fr',
            'fr-FR': 'fr',
            'fr-CA': 'fr',
            'en': 'en',
            'en-US': 'en',
            'en-GB': 'en',
            'de': 'de',
            'de-DE': 'de',
            'it': 'it',
            'it-IT': 'it'
        };

        let detectedLanguage = 'pt-br';

        if (domainLanguages[emailDomain]) {
            detectedLanguage = domainLanguages[emailDomain];
        } else if (country && countryLanguages[country]) {
            detectedLanguage = countryLanguages[country];
        } else if (browserLanguage && browserLangMap[browserLanguage]) {
            detectedLanguage = browserLangMap[browserLanguage];
        }

        console.log(`üåç Idioma detectado: ${detectedLanguage}`);
        return detectedLanguage;

    } catch (error) {
        console.error("‚ùå Erro na detec√ß√£o de idioma:", error);
        return 'pt-br';
    }
}

// Fun√ß√£o para configurar idioma do Firebase Auth
async function setFirebaseLanguage(language) {
    try {
        if (!window.auth) {
            console.warn("‚ö†Ô∏è Firebase Auth n√£o est√° inicializado ainda");
            return;
        }

        const languageCodes = {
            'pt-br': 'pt',
            'es': 'es',
            'fr': 'fr',
            'en': 'en',
            'de': 'de',
            'it': 'it'
        };

        const firebaseLanguageCode = languageCodes[language] || 'pt';
        window.auth.languageCode = firebaseLanguageCode;
        
        console.log(`üîß Firebase Auth configurado para: ${language} (${firebaseLanguageCode})`);
    } catch (error) {
        console.error("‚ùå Erro ao configurar idioma do Firebase:", error);
    }
}

// Fun√ß√£o para registro com detec√ß√£o autom√°tica de idioma
async function registerWithAutoLanguage(email, password) {
    const detectedLanguage = await detectUserLanguage(email);
    await setFirebaseLanguage(detectedLanguage);
    
    if (!window.auth) {
        throw new Error("Firebase Auth n√£o est√° inicializado");
    }
    
    const userCredential = await window.auth.createUserWithEmailAndPassword(email, password);
    const user = userCredential.user;

    await user.sendEmailVerification();
    
    console.log(`‚úÖ Usu√°rio criado com idioma ${detectedLanguage}:`, user.uid);
    return { uid: user.uid, email: user.email, language: detectedLanguage };
}

// Fun√ß√£o para reenviar verifica√ß√£o com idioma
async function resendVerificationWithLanguage(language) {
    if (!window.auth?.currentUser) {
        throw new Error("Usu√°rio n√£o est√° logado");
    }

    await setFirebaseLanguage(language);
    await window.auth.currentUser.sendEmailVerification();
    
    console.log(`‚úÖ Verifica√ß√£o reenviada em ${language}`);
    return true;
}

// Fun√ß√£o para sincronizar status de email ap√≥s login
async function syncEmailVerificationStatus() {
    try {
        if (!window.auth?.currentUser) {
            return null;
        }

        // Verificar se Functions est√° dispon√≠vel
        if (!window.functions) {
            console.warn("‚ö†Ô∏è Firebase Functions n√£o dispon√≠vel - pulando sincroniza√ß√£o");
            return null;
        }
        
        const syncEmail = window.functions.httpsCallable('syncEmailOnLogin');
        const result = await syncEmail();
        
        console.log("‚úÖ Sincroniza√ß√£o de email:", result.data.message);
        return result.data;
        
    } catch (error) {
        console.error("‚ùå Erro na sincroniza√ß√£o de email:", error);
        return null;
    }
}

// Fun√ß√£o para garantir autentica√ß√£o an√¥nima quando necess√°rio
async function ensureAuthentication() {
    try {
        if (!window.auth) {
            throw new Error("Firebase Auth n√£o est√° inicializado");
        }

        if (!window.auth.currentUser) {
            console.log("Realizando autentica√ß√£o an√¥nima para opera√ß√µes de pagamento...");
            await window.auth.signInAnonymously();
            console.log("Autentica√ß√£o an√¥nima bem-sucedida para pagamento");
        }
    } catch (error) {
        console.error("Erro na autentica√ß√£o an√¥nima:", error);
    }
}    