const admin = require('firebase-admin');

// ‚úÖ Fun√ß√£o para sanitizar dados de entrada (CORRIGIDA: mais robusta)
function sanitizeInput(input) {
  if (typeof input !== 'string') return input;
  
  // Usa whitelist approach - apenas caracteres alfanum√©ricos, espa√ßos e alguns s√≠mbolos seguros
  return input
    .replace(/[^\w\s\-\.@√°√©√≠√≥√∫√†√®√¨√≤√π√¢√™√Æ√¥√ª√£√µ√ß√±√º]/gi, '') // Permite apenas caracteres seguros
    .trim()
    .substring(0, 255); // Limita o tamanho
}

// Fun√ß√£o para inicializar o Firebase Admin SDK de forma segura
function initializeFirebaseAdmin() {
  // A Vercel armazena as vari√°veis de ambiente, ent√£o podemos acess√°-las diretamente
  if (!admin.apps.length) {
    try {
      const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_JSON);
      admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
        databaseURL: "https://shortcut-6256b-default-rtdb.firebaseio.com"
      });
      console.log('Firebase Admin SDK inicializado com sucesso.');
    } catch (error) {
      console.error('Falha na inicializa√ß√£o do Firebase Admin SDK:', error);
    }
  }
  return admin;
}

export default async function handler(req, res) {
  // Headers CORS mais restritivos
  res.setHeader('Access-Control-Allow-Origin', 'https://atalho.me');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  // Handle preflight request
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  // Garante que s√≥ aceitamos requisi√ß√µes POST
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©todo n√£o permitido' });
  }

  // Inicializa o admin
  const adminInstance = initializeFirebaseAdmin();
  const db = adminInstance.firestore();

  const { email, password, name, phone, company, language = 'pt-br' } = req.body;

  // Valida√ß√£o b√°sica dos dados recebidos
  if (!email || !password || !name) {
    return res.status(400).json({ error: 'Dados insuficientes: E-mail, senha e nome s√£o obrigat√≥rios.' });
  }

  // Valida√ß√£o de for√ßa da senha
  if (password.length < 8) {
    return res.status(400).json({ error: 'A senha deve ter pelo menos 8 caracteres.' });
  }

  // Verificar se a senha cont√©m pelo menos um n√∫mero e uma letra
  const hasNumber = /\d/.test(password);
  const hasLetter = /[a-zA-Z]/.test(password);
  if (!hasNumber || !hasLetter) {
    return res.status(400).json({ error: 'A senha deve conter pelo menos uma letra e um n√∫mero.' });
  }

  // Valida√ß√£o de email b√°sica
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ error: 'Formato de e-mail inv√°lido.' });
  }

  try {
    console.log(`[API] Recebida solicita√ß√£o para criar usu√°rio: ${email}`);
    console.log(`[API] Dados recebidos:`, { email, name, phone: phone || 'n√£o informado', company: company || 'n√£o informado', language });
    
    // 1. Cria o usu√°rio no Firebase Authentication com email n√£o verificado
    console.log(`[API] Tentando criar usu√°rio no Firebase Auth...`);
    const userRecord = await adminInstance.auth().createUser({
      email: email.toLowerCase().trim(),
      password: password,
      displayName: sanitizeInput(name),
      emailVerified: false, // For√ßa verifica√ß√£o de email
    });

    console.log(`[API] ‚úÖ Usu√°rio criado no Auth com UID: ${userRecord.uid}`);

    // 2. Prepara os dados para salvar no Firestore - ESTRUTURA CORRIGIDA
    const customerData = {
      // Dados principais (sanitizados para prevenir XSS)
      Nome: sanitizeInput(name), // Campo Nome (com N mai√∫sculo) para compatibilidade
      email: email.toLowerCase().trim(), // Email sempre em lowercase
      phone: sanitizeInput(phone) || null,
      country: sanitizeInput(company) || "Brasil", // Usando company como country por compatibilidade
      
      // Dados do usu√°rio Firebase
      user: {
        uid: userRecord.uid,
        email: email,
        displayName: name
      },
      
      // Status da conta
      terms_accepted: true,
      terms_accepted_at: new Date().toISOString(),
      created_at: admin.firestore.FieldValue.serverTimestamp(),
      email_verified: false,
      account_status: 'pending_verification',
      preferred_language: language,
      
      // Dados de licen√ßa
      license_active: false,
      license_type: null,
      payment_status: 'pending',
      pay_method: null,
      sub_start: null,
      sub_end: null,
      last_payment_date: null,
      active_machines: 0,
      
      // ID para refer√™ncia
      id: userRecord.uid
    };

    // 3. Salva os dados no Firestore usando o UID como ID do documento
    console.log(`[API] Tentando salvar dados no Firestore...`);
    console.log(`[API] Dados a serem salvos:`, customerData);
    await db.collection('users').doc(userRecord.uid).set(customerData);
    console.log(`[API] ‚úÖ Dados do usu√°rio salvos no Firestore.`);

    // 4. Tentar enviar email via Zoho usando m√©todo de fallback direto
    console.log(`[API] üìß Enviando email de verifica√ß√£o em ${language}...`);
    
    // Templates de email por idioma
    const emailTemplates = {
      'pt-br': {
        subject: 'Atalho - Confirme seu email para ativar sua conta',
        greeting: 'Ol√°!',
        intro: `Voc√™ se cadastrou no <strong>Atalho</strong> com o email: <strong>${email}</strong>`,
        instruction: 'Para ativar sua conta e come√ßar a usar nossos recursos de automa√ß√£o, confirme seu email clicando no bot√£o abaixo:',
        buttonText: '‚úÖ Confirmar Email',
        fallbackText: 'Se o bot√£o n√£o funcionar, copie e cole este link no seu navegador:',
        expiryText: '‚ö†Ô∏è Este link expira em 24 horas por seguran√ßa.',
        footer: '<strong>Atalho</strong> - Automa√ß√£o e Produtividade'
      },
      'en': {
        subject: 'Atalho - Confirm your email to activate your account',
        greeting: 'Hello!',
        intro: `You signed up for <strong>Atalho</strong> with the email: <strong>${email}</strong>`,
        instruction: 'To activate your account and start using our automation features, confirm your email by clicking the button below:',
        buttonText: '‚úÖ Confirm Email',
        fallbackText: 'If the button doesn\'t work, copy and paste this link in your browser:',
        expiryText: '‚ö†Ô∏è This link expires in 24 hours for security.',
        footer: '<strong>Atalho</strong> - Automation and Productivity'
      },
      'es': {
        subject: 'Atalho - Confirma tu email para activar tu cuenta',
        greeting: '¬°Hola!',
        intro: `Te registraste en <strong>Atalho</strong> con el email: <strong>${email}</strong>`,
        instruction: 'Para activar tu cuenta y comenzar a usar nuestras funciones de automatizaci√≥n, confirma tu email haciendo clic en el bot√≥n de abajo:',
        buttonText: '‚úÖ Confirmar Email',
        fallbackText: 'Si el bot√≥n no funciona, copia y pega este enlace en tu navegador:',
        expiryText: '‚ö†Ô∏è Este enlace expira en 24 horas por seguridad.',
        footer: '<strong>Atalho</strong> - Automatizaci√≥n y Productividad'
      },
      'fr': {
        subject: 'Atalho - Confirmez votre email pour activer votre compte',
        greeting: 'Bonjour !',
        intro: `Vous vous √™tes inscrit sur <strong>Atalho</strong> avec l'email : <strong>${email}</strong>`,
        instruction: 'Pour activer votre compte et commencer √† utiliser nos fonctionnalit√©s d\'automatisation, confirmez votre email en cliquant sur le bouton ci-dessous :',
        buttonText: '‚úÖ Confirmer Email',
        fallbackText: 'Si le bouton ne fonctionne pas, copiez et collez ce lien dans votre navigateur :',
        expiryText: '‚ö†Ô∏è Ce lien expire dans 24 heures pour des raisons de s√©curit√©.',
        footer: '<strong>Atalho</strong> - Automatisation et Productivit√©'
      },
      'de': {
        subject: 'Atalho - Best√§tigen Sie Ihre E-Mail, um Ihr Konto zu aktivieren',
        greeting: 'Hallo!',
        intro: `Sie haben sich bei <strong>Atalho</strong> mit der E-Mail registriert: <strong>${email}</strong>`,
        instruction: 'Um Ihr Konto zu aktivieren und unsere Automatisierungsfunktionen zu nutzen, best√§tigen Sie Ihre E-Mail, indem Sie auf die Schaltfl√§che unten klicken:',
        buttonText: '‚úÖ E-Mail Best√§tigen',
        fallbackText: 'Wenn die Schaltfl√§che nicht funktioniert, kopieren Sie diesen Link und f√ºgen Sie ihn in Ihren Browser ein:',
        expiryText: '‚ö†Ô∏è Dieser Link l√§uft aus Sicherheitsgr√ºnden in 24 Stunden ab.',
        footer: '<strong>Atalho</strong> - Automatisierung und Produktivit√§t'
      },
      'it': {
        subject: 'Atalho - Conferma la tua email per attivare il tuo account',
        greeting: 'Ciao!',
        intro: `Ti sei registrato su <strong>Atalho</strong> con l'email: <strong>${email}</strong>`,
        instruction: 'Per attivare il tuo account e iniziare a utilizzare le nostre funzionalit√† di automazione, conferma la tua email cliccando il pulsante qui sotto:',
        buttonText: '‚úÖ Conferma Email',
        fallbackText: 'Se il pulsante non funziona, copia e incolla questo link nel tuo browser:',
        expiryText: '‚ö†Ô∏è Questo link scade in 24 ore per sicurezza.',
        footer: '<strong>Atalho</strong> - Automazione e Produttivit√†'
      }
    };

    // Usar o template do idioma solicitado ou fallback para pt-br
    const template = emailTemplates[language] || emailTemplates['pt-br'];
    
    try {
      // Por enquanto, usar m√©todo de fallback que sabemos que funciona
      const verificationLink = await adminInstance.auth().generateEmailVerificationLink(email, {
          url: `https://atalho.me/emailHandler.html?lang=${language}`,
      });
      
      await db.collection('mail').add({
          to: [email],
          message: {
              subject: template.subject,
              html: `
                  <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #f8f9fa; padding: 20px;">
                    <div style="background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                      <div style="text-align: center; margin-bottom: 30px;">
                        <img src="https://atalho.me/assets/img/Atalho.png" alt="Logo Atalho" style="width: 80px; height: 80px; object-fit: contain; margin-bottom: 10px;">
                        <h1 style="color: #dbc9ad; margin: 0;">Atalho</h1>
                        <p style="color: #666; margin: 5px 0 0 0;">Automa√ß√£o e Produtividade</p>
                      </div>
                      
                      <h2 style="color: #333; text-align: center;">${template.buttonText}</h2>
                      
                      <p style="color: #555; line-height: 1.6;">
                        ${template.greeting} ${template.intro}
                      </p>
                      
                      <p style="color: #555; line-height: 1.6;">
                        ${template.instruction}
                      </p>
                      
                      <div style="text-align: center; margin: 30px 0;">
                        <a href="${verificationLink}" 
                           style="background: linear-gradient(135deg, #dbc9ad 0%, #c8b298 100%); 
                                  color: #333; 
                                  padding: 15px 30px; 
                                  text-decoration: none; 
                                  border-radius: 8px; 
                                  font-weight: bold; 
                                  font-size: 16px;
                                  display: inline-block;">
                          ${template.buttonText}
                        </a>
                      </div>
                      
                      <p style="color: #888; font-size: 14px; line-height: 1.5;">
                        ${template.fallbackText}<br>
                        <a href="${verificationLink}" style="color: #dbc9ad; word-break: break-all;">${verificationLink}</a>
                      </p>
                      
                      <p style="color: #888; font-size: 14px; line-height: 1.5; margin-top: 20px;">
                        ${template.expiryText}
                      </p>
                      
                      <hr style="border: none; border-top: 1px solid #eee; margin: 30px 0;">
                      
                      <div style="text-align: center;">
                        <p style="color: #666; font-size: 14px; margin: 0;">
                          ${template.footer}<br>
                          üìß contact@atalho.me | üåê https://atalho.me
                        </p>
                      </div>
                    </div>
                  </div>
              `,
          },
      });
      console.log(`[API] ‚úÖ Email de verifica√ß√£o enviado via extens√£o em ${language}.`);
    } catch (error) {
      console.error(`[API] ‚ùå Erro ao enviar email:`, error);
      console.log(`[API] üîÑ Usando m√©todo de fallback simples...`);
      
      // Fallback em caso de erro
      const verificationLink = await adminInstance.auth().generateEmailVerificationLink(email, {
          url: `https://atalho.me/emailHandler.html?lang=${language}`,
      });
      
      await db.collection('mail').add({
          to: [email],
          message: {
              subject: template.subject,
              html: `${template.greeting} Email de verifica√ß√£o do Atalho - Por favor, clique no link: ${verificationLink}`,
          },
      });
      console.log(`[API] ‚úÖ Email de fallback simples enviado em ${language}.`);
    }

    // 6. Responde ao cliente com sucesso
    console.log(`[API] ‚úÖ Processo conclu√≠do com sucesso para UID: ${userRecord.uid}`);
    return res.status(201).json({
        success: true,
        uid: userRecord.uid,
        email: email,
        name: name,
        message: 'Conta criada com sucesso! Email de verifica√ß√£o enviado.',
        emailSent: true,
    });

  } catch (error) {
    console.error('[API] ‚ùå Erro ao criar usu√°rio:', error);
    console.error('[API] ‚ùå C√≥digo do erro:', error.code);
    console.error('[API] ‚ùå Mensagem do erro:', error.message);
    
    // Traduz os erros do Firebase para mensagens amig√°veis
    let friendlyMessage = 'Ocorreu um erro inesperado ao criar sua conta.';
    if (error.code === 'auth/email-already-exists') {
      friendlyMessage = 'Este e-mail j√° est√° cadastrado. Tente fazer login ou redefinir sua senha.';
    } else if (error.code === 'auth/invalid-password') {
      friendlyMessage = 'Senha inv√°lida. A senha precisa ter no m√≠nimo 6 caracteres.';
    } else if (error.code === 'auth/invalid-email') {
      friendlyMessage = 'Email inv√°lido. Verifique o formato do email.';
    } else if (error.code === 'auth/weak-password') {
      friendlyMessage = 'Senha muito fraca. Use uma senha mais forte.';
    }
    
    return res.status(500).json({ error: friendlyMessage });
  }
} 